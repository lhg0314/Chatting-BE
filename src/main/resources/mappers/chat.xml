<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 사용자 등록 -->
<mapper namespace="com.project.chatting.chat.repository.ChatRepository">

  <!-- 채팅방 조회 -->
  <!-- <select id="findChatRoomByUserId" parameterType="com.project.chatting.chat.request.CreateRoomRequest" resultType="string">
    SELECT IFNULL(room_id, -1) AS room_id 
    FROM chatJoin 
    WHERE user_Id IN (#{toUserId}, #{fromUserId}) GROUP BY room_id HAVING COUNT(DISTINCT user_id) = 2;
    WHERE user_id IN (
      <foreach collection="userId" item="user" separator=",">
        #{user}
      </foreach>
    )
    GROUP BY room_id HAVING COUNT(DISTINCT user_id) = #{userCount};
  </select> -->
  <select id="findChatRoomByUserId" parameterType="string">
    SELECT 
      a.room_id, cr.room_name, a.userNames
    FROM
      (
        SELECT 
          GROUP_CONCAT(cj.user_id ORDER BY cj.user_id ASC) users,
          GROUP_CONCAT(user_name ORDER BY cj.user_id ASC) userNames,
          room_id
        FROM
          chatJoin cj 
        JOIN user u
        ON cj.user_id = u.user_id
        WHERE room_state = "Y" GROUP BY room_id
      ) a
    JOIN chatRoom cr
    ON a.room_id = cr.room_id
    WHERE a.users = #{users}
  </select>


  <!-- 채팅방 생성 -->
  <insert id="setChatRoom" parameterType="com.project.chatting.chat.request.CreateRoomRequest" useGeneratedKeys="true" keyProperty="roomId" keyColumn="room_id">
    INSERT INTO chatRoom (room_name) VALUES (#{roomName})
  </insert>

  <!-- 채팅방 참여 생성 -->
  <insert id="setChatJoin" parameterType="java.util.List">
    INSERT INTO chatJoin (user_id, room_id, room_state) 
    VALUES 
    <foreach collection="list" item="item" separator=",">
    (
      #{item.userId},
      #{item.roomId},
      #{item.roomState}
    )
    </foreach>
  </insert>
  
  <select id="getChatMemberCnt" parameterType="int" resultType="int">
	  SELECT COUNT(*) FROM chatJoin WHERE room_id = #{roomID}
  </select>
  
  <insert id="setChatMessage" parameterType="com.project.chatting.chat.request.ChatRequest">
	  INSERT INTO chatContents(room_id, user_id, message, message_type, createAt, readCnt) 
	  VALUES 
	  <foreach collection="list" item="item" separator=",">
		  (#{item.roomId}, #{item.userId}, #{item.message}, #{item.messageType}, #{item.createAt}, #{item.readCnt})
	  </foreach>
  </insert>
  
  <insert id="setChatRead" parameterType="java.util.List">
	  INSERT INTO chatRead(room_id, chat_id, user_id, read_yn) 
	  VALUES 
	  <foreach collection="list" item="item" separator=",">
		  (#{item.roomId},
			  (SELECT chat_id 
	  			FROM chatContents WHERE user_id = #{item.readMap.creater} AND createAt = #{item.readMap.at} AND room_id=#{item.roomId}),
			  #{item.readMap.id}, #{item.readMap.yn})
	  </foreach> 
  </insert>

  <!-- 채팅방 목록 조회 -->
  <select id="selectChatRoomList" parameterType="String">
    SELECT C.room_id, C.room_name FROM chatRoom C
    JOIN chatJoin J ON J.room_id = C.room_id
    JOIN user U ON U.user_id = J.user_id
    WHERE C.room_id IN (SELECT room_id FROM chatJoin WHERE user_id = #{userId})
    AND J.user_id = #{userId}
    AND J.room_state = "Y"
  </select>

  <!-- 채팅방 존재하는지 확인 -->
  <select id="existChatRoom" parameterType="int" resultType="int">
    SELECT COUNT(*) FROM chatRoom WHERE room_id = #{roomId}
  </select>
  <!-- 채팅방 나가기 -->
  <update id="setLeaveChatJoin" parameterType="com.project.chatting.chat.request.LeaveChatRoomRequest">
    UPDATE chatJoin SET room_state = #{roomState} WHERE user_id = #{userId} AND room_id = ${roomId}
  </update>
  
  <select id="getRoomMember" parameterType="int">
	  SELECT user_id  FROM chatJoin WHERE chatJoin.room_id = #{roomId}
  </select>
  
  <select id="getMessageList" resultType="com.project.chatting.chat.entity.Chat">
	  SELECT * FROM chatContents WHERE room_id=#{arg0} ORDER BY createAt DESC LIMIT #{arg1} OFFSET #{arg2}
  </select>
  
  <!-- 채팅방 참여 인원수 조회 -->
  <select id="getChatJoinUsers" parameterType="int" resultType="int">
    SELECT COUNT(*) FROM chatJoin WHERE room_id = #{roomId} AND room_state = "Y"
  </select>

  <!-- 채팅방 삭제 -->
  <delete id="deleteChatRoom" parameterType="int">
    DELETE FROM chatRoom WHERE room_id = #{roomId}  
  </delete>
  
  <select id="getChatMessageUsers" parameterType="int">
	  SELECT user_id FROM chatRead WHERE chat_id = #{chatId};
  </select>
</mapper>
