<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 사용자 등록 -->
<mapper namespace="com.project.chatting.chat.repository.ChatRepository">


  <!-- 채팅방 조회 -->
  <!-- <select id="findChatRoomByUserId" parameterType="com.project.chatting.chat.request.CreateRoomRequest" resultType="string">
    SELECT IFNULL(room_id, -1) AS room_id 
    FROM chatJoin 
    WHERE user_Id IN (#{toUserId}, #{fromUserId}) GROUP BY room_id HAVING COUNT(DISTINCT user_id) = 2;
    WHERE user_id IN (
      <foreach collection="userId" item="user" separator=",">
        #{user}
      </foreach>
    )
    GROUP BY room_id HAVING COUNT(DISTINCT user_id) = #{userCount};
  </select> -->
  <select id="findChatRoomByUserId" parameterType="string" resultType="string">
    SELECT 
      a.room_id
    FROM 
	    (SELECT GROUP_CONCAT(user_id ORDER BY user_id ASC) users, room_id FROM chatJoin GROUP BY room_id) a
    WHERE a.users = (#{users})
  </select>




  <!-- 채팅방 생성 -->
  <insert id="setChatRoom" parameterType="com.project.chatting.chat.request.CreateRoomRequest" useGeneratedKeys="true" keyProperty="roomId" keyColumn="room_id">
    INSERT INTO chatRoom (room_name) VALUES (#{roomName})
  </insert>

  <!-- 채팅방 참여 생성 -->
  <insert id="setChatJoin" parameterType="java.util.List">
    INSERT INTO chatJoin (user_id, room_id, room_state) 
    VALUES 
    <foreach collection="list" item="item" separator=",">
    (
      #{item.userId},
      #{item.roomId},
      #{item.roomState}
    )
    </foreach>
  </insert>
  
  <select id="getChatMemberCnt" parameterMap="int" resultType="int">
	  SELECT COUNT(*) FROM chatJoin WHERE room_id = #{roomID]
  </select>
</mapper>