<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 사용자 등록 -->
<mapper namespace="com.project.chatting.chat.repository.ChatRepository">

  <!-- 채팅방 조회 -->
  <!-- <select id="findChatRoomByUserId" parameterType="com.project.chatting.chat.request.CreateRoomRequest" resultType="string">
    SELECT IFNULL(room_id, -1) AS room_id 
    FROM chatJoin 
    WHERE user_Id IN (#{toUserId}, #{fromUserId}) GROUP BY room_id HAVING COUNT(DISTINCT user_id) = 2;
    WHERE user_id IN (
      <foreach collection="userId" item="user" separator=",">
        #{user}
      </foreach>
    )
    GROUP BY room_id HAVING COUNT(DISTINCT user_id) = #{userCount};
  </select> -->
  <select id="findChatRoomByUserId" parameterType="string" resultType="string">
    SELECT 
      a.room_id
    FROM 
	    (SELECT GROUP_CONCAT(user_id ORDER BY user_id ASC) users, room_id FROM chatJoin GROUP BY room_id) a
    WHERE a.users = (#{users})
  </select>


  <!-- 채팅방 생성 -->
  <insert id="setChatRoom" parameterType="com.project.chatting.chat.request.CreateRoomRequest" useGeneratedKeys="true" keyProperty="roomId" keyColumn="room_id">
    INSERT INTO chatRoom (room_name) VALUES (#{roomName})
  </insert>

  <!-- 채팅방 참여 생성 -->
  <insert id="setChatJoin" parameterType="java.util.List">
    INSERT INTO chatJoin (user_id, room_id, room_state) 
    VALUES 
    <foreach collection="list" item="item" separator=",">
    (
      #{item.userId},
      #{item.roomId},
      #{item.roomState}
    )
    </foreach>
  </insert>
  
  <select id="getChatMemberCnt" parameterType="int" resultType="int">
	  SELECT COUNT(*) FROM chatJoin WHERE room_id = #{roomID}
  </select>
  
  <insert id="setChatMessage" parameterType="com.project.chatting.chat.request.ChatRequest">
	  INSERT INTO chatContents(room_id, user_id, message, message_type, createAt, readCnt) 
	  VALUES(#{roomId}, #{userId}, #{message}, #{messageType}, #{createAt}, #{readCnt});
  </insert>
  
  <insert id="setChatRead" parameterType="com.project.chatting.chat.request.ChatReadRequest">
	  INSERT INTO chatRead(chat_id, room_id, user_id, read_yn) 
	  VALUES((SELECT chat_id 
	  			FROM chatContents WHERE user_id = #{userId} AND createAt = #{createAt}), #{roomId}, #{userId}, #{readYn}); 
  </insert>

  <!-- 채팅방 목록 조회 -->
  <select id="selectChatRoomList" parameterType="String">
    SELECT C.room_id, C.room_name FROM chatRoom C
    JOIN chatJoin J ON J.room_id = C.room_id
    JOIN user U ON U.user_id = J.user_id
    WHERE C.room_id IN (SELECT room_id FROM chatJoin WHERE user_id = #{userId})
    AND J.user_id = #{userId}
    AND J.room_state = "Y"
  </select>
  
</mapper>
